name: Release

on:
  push:
    tags:
      - 'v*'
  # Manual release trigger
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.8.3)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  ensure-ci-success:
    name: Ensure CI Succeeded
    runs-on: ubuntu-latest
    permissions:
      checks: read
    steps:
      - name: Wait for CI workflow to succeed
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            let tagName;
            if (context.eventName === 'workflow_dispatch') {
              tagName = context.payload.inputs.tag;
              if (!tagName) {
                core.setFailed('workflow_dispatch requires the tag input.');
                return;
              }
            } else if (context.ref?.startsWith('refs/tags/')) {
              tagName = context.ref.replace('refs/tags/', '');
            } else {
              core.setFailed(`Unsupported event: ${context.eventName}`);
              return;
            }

            const ensureCommitSha = async () => {
              const { data: ref } = await github.rest.git.getRef({ owner, repo, ref: `tags/${tagName}` });
              let sha = ref.object.sha;
              if (ref.object.type === 'tag') {
                const { data: tag } = await github.rest.git.getTag({ owner, repo, tag_sha: sha });
                sha = tag.object.sha;
              }
              return sha;
            };

            const wait = ms => new Promise(resolve => setTimeout(resolve, ms));
            const maxAttempts = 40;
            const delayMs = 15000;
            const targetSha = await ensureCommitSha();

            core.info(`Checking CI status for commit ${targetSha} (tag ${tagName}).`);

            // First, check if CI has run for this commit
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              const { data } = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: targetSha,
                per_page: 100,
              });

              // Look for CI workflow jobs (Format, Docs, Clippy lints, etc.)
              const ciRuns = data.check_runs.filter(run => {
                // CI jobs have names like "Format", "Docs", "Clippy lints", "Tests", etc.
                const ciJobNames = ['Format', 'Docs', 'Clippy lints', 'Bevy lints', 'Tests', 'Check web'];
                return ciJobNames.includes(run.name);
              });

              if (ciRuns.length === 0) {
                core.info(`Attempt ${attempt}: No CI checks found on commit ${targetSha}. This may be because the tag was created on an old commit.`);

                // Try to find CI runs on main branch for this commit
                const { data: commits } = await github.rest.repos.listCommits({
                  owner,
                  repo,
                  sha: 'main',
                  per_page: 100
                });

                const commitOnMain = commits.find(c => c.sha === targetSha);
                if (!commitOnMain) {
                  core.setFailed(`Commit ${targetSha} is not on main branch. Only main branch commits can be released.`);
                  return;
                }

                await wait(delayMs);
                continue;
              }

              const incomplete = ciRuns.filter(run => run.status !== 'completed');
              if (incomplete.length > 0) {
                core.info(`Attempt ${attempt}: ${incomplete.length} CI checks still running, waiting...`);
                await wait(delayMs);
                continue;
              }

              const failed = ciRuns.filter(run => run.conclusion !== 'success');
              if (failed.length > 0) {
                core.setFailed(`CI checks failed: ${failed.map(run => `${run.name} (${run.conclusion})`).join(', ')}`);
                return;
              }

              core.info('All CI checks succeeded.');
              return;
            }

            core.setFailed('Timed out waiting for CI checks to complete.');

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: ensure-ci-success
    permissions:
      contents: write
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Get changelog
        id: changelog
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION="${{ steps.get_tag.outputs.tag_name }}"
          VERSION_NUM=${VERSION#v}
          
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" HEAD)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## üöÄ What's New in $VERSION
          
          $CHANGELOG
          
          ## üì¶ Installation
          
          Add to your \`Cargo.toml\`:
          \`\`\`toml
          [dependencies]
          bevy_perf_hud = "$VERSION_NUM"
          \`\`\`
          
          ## üîó Links
          - [üìö Documentation](https://docs.rs/bevy_perf_hud/$VERSION_NUM)
          - [üìã Changelog](https://github.com/ZoOLForge/bevy_perf_hud/blob/master/CHANGELOG.md)
          EOF
          
          echo "Generated release notes:"
          cat release_notes.md

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          name: Release ${{ steps.get_tag.outputs.tag_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_tag.outputs.tag_name, 'alpha') || contains(steps.get_tag.outputs.tag_name, 'beta') || contains(steps.get_tag.outputs.tag_name, 'rc') }}

  # Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: github-release
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev jq

      - name: Verify version matches tag
        run: |
          TAG_VERSION="${{ needs.github-release.outputs.tag_name }}"
          CARGO_VERSION="v$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')"
          
          echo "Tag version: $TAG_VERSION"
          echo "Cargo.toml version: $CARGO_VERSION"
          
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi

      - name: Check package
        run: cargo package --verbose

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
            echo "‚ö†Ô∏è CARGO_REGISTRY_TOKEN not found. Skipping crates.io publication."
            echo "Please add CARGO_REGISTRY_TOKEN to repository secrets to enable automatic publishing."
            exit 0
          fi
          echo "Publishing bevy_perf_hud to crates.io..."
          cargo publish --verbose

      - name: Verify publication
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
            echo "üîÑ Skipping publication verification (no CARGO_REGISTRY_TOKEN)"
            exit 0
          fi
          
          echo "Waiting for package to be available on crates.io..."
          sleep 30
          
          VERSION="${{ needs.github-release.outputs.tag_name }}"
          VERSION_NUM=${VERSION#v}
          
          # Check if the version is available on crates.io
          for i in {1..10}; do
            if curl -f "https://crates.io/api/v1/crates/bevy_perf_hud/$VERSION_NUM" > /dev/null 2>&1; then
              echo "‚úÖ Package successfully published to crates.io!"
              break
            else
              echo "‚è≥ Waiting for package to be indexed... (attempt $i/10)"
              sleep 30
            fi
          done

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [github-release, publish-crates]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Update README badges
        run: |
          VERSION="${{ needs.github-release.outputs.tag_name }}"
          VERSION_NUM=${VERSION#v}
          
          # Update version in README if needed
          sed -i "s/bevy_perf_hud = \"[^\"]*\"/bevy_perf_hud = \"$VERSION_NUM\"/g" README.md

      - name: Commit documentation updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No documentation changes to commit"
          else
            git add README.md
            git commit -m "docs: update version references to ${{ needs.github-release.outputs.tag_name }}"
            git push
          fi

  # Trigger documentation deployment
  trigger-docs-deploy:
    name: Trigger Documentation Deploy
    runs-on: ubuntu-latest
    permissions:
      actions: write
    needs: [github-release, publish-crates]
    steps:
      - name: Trigger deploy-page workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-page.yaml',
              ref: 'master'
            });
