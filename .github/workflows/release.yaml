name: Release

on:
  push:
    tags: ['v*']

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings

jobs:
  # Wait for CI to complete successfully before proceeding with release
  wait-for-ci:
    name: Wait for CI
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI workflow to complete
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'CI'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success

  # Extract version information from tag
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    needs: wait-for-ci
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_type: ${{ steps.version.outputs.type }}
    steps:
      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "type=release" >> $GITHUB_OUTPUT
          elif [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-.*$ ]]; then
            echo "type=prerelease" >> $GITHUB_OUTPUT
          else
            echo "type=invalid" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Build example binaries for multiple platforms
  build-examples:
    name: Build Examples
    needs: [wait-for-ci, extract-version]
    if: needs.extract-version.outputs.version_type != 'invalid'
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64
          - target: x86_64-apple-darwin
            os: macos-13
            name: macos-x64
          - target: aarch64-apple-darwin
            os: macos-14
            name: macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - name: Build examples
        run: |
          cargo build --examples --release --target ${{ matrix.target }}

      - name: Package examples
        shell: bash
        run: |
          mkdir -p artifacts/${{ matrix.name }}

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/examples/*.exe artifacts/${{ matrix.name }}/ 2>/dev/null || true
            EXT=".exe"
          else
            cp target/${{ matrix.target }}/release/examples/* artifacts/${{ matrix.name }}/ 2>/dev/null || true
            EXT=""
          fi

          # Create a simple archive
          cd artifacts
          if command -v tar &> /dev/null; then
            tar czf bevy_perf_hud-examples-${{ needs.extract-version.outputs.version }}-${{ matrix.name }}.tar.gz ${{ matrix.name }}/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: examples-${{ matrix.name }}
          path: artifacts/*.tar.gz
          retention-days: 5

  # Publish to crates.io using OIDC trusted publishing
  publish-crate:
    name: Publish to crates.io
    needs: [wait-for-ci, extract-version]
    if: needs.extract-version.outputs.version_type == 'release'
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Verify version matches tag
        run: |
          CARGO_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "bevy_perf_hud") | .version')
          TAG_VERSION="${{ needs.extract-version.outputs.version }}"

          if [[ "$CARGO_VERSION" != "$TAG_VERSION" ]]; then
            echo "Version mismatch: Cargo.toml has $CARGO_VERSION, tag has $TAG_VERSION"
            exit 1
          fi

      - name: Authenticate with crates.io
        uses: rust-lang/crates-io-auth-action@v1
        id: auth

      - name: Publish to crates.io
        run: cargo publish --locked
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    needs: [build-examples, extract-version, publish-crate]
    # Run even if publish-crate is skipped (for prereleases)
    if: |
      always() &&
      needs.extract-version.outputs.version_type != 'invalid' &&
      (needs.publish-crate.result == 'success' || needs.publish-crate.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: examples-*
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ needs.extract-version.outputs.version_type == 'prerelease' }}
          generate_release_notes: true
          body: |
            ## bevy_perf_hud ${{ needs.extract-version.outputs.version }}

            A configurable performance heads-up display (HUD) plugin for Bevy applications.

            ### Installation

            Add to your `Cargo.toml`:
            ```toml
            [dependencies]
            bevy_perf_hud = "${{ needs.extract-version.outputs.version }}"
            ```

            ### Quick Start

            ```rust
            use bevy::prelude::*;
            use bevy_perf_hud::BevyPerfHudPlugin;

            fn main() {
                App::new()
                    .add_plugins(DefaultPlugins)
                    .add_plugins(BevyPerfHudPlugin)
                    .run();
            }
            ```

            ### Example Programs

            Download the example programs below to see the HUD in action:
            - `simple`: 3D scene with performance monitoring
            - `custom_metric`: Demonstrates custom metric providers

            Run examples with: `cargo run --example simple`

            ---

            üì¶ **Published to crates.io**: https://crates.io/crates/bevy_perf_hud
            üìö **Documentation**: https://docs.rs/bevy_perf_hud
            üè† **Repository**: https://github.com/ZoOLForge/bevy_perf_hud
          files: |
            artifacts/*.tar.gz

      - name: Update release with crates.io link
        if: needs.extract-version.outputs.version_type == 'release'
        run: |
          echo "üéâ Successfully published bevy_perf_hud ${{ needs.extract-version.outputs.version }} to crates.io!"
          echo "üì¶ View on crates.io: https://crates.io/crates/bevy_perf_hud/${{ needs.extract-version.outputs.version }}"